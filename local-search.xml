<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>代码审计（二）</title>
    <link href="/2023/10/16/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2023/10/16/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>共有危险点：</p><p>1、sql语句中order by 后面的参数是无法进行预编译赋值的，所以需要重点排查。</p><p>2、命令执行：java代码的runtime类，可能会存在命令执行。</p><h3 id="框架漏洞"><a href="#框架漏洞" class="headerlink" title="框架漏洞"></a>框架漏洞</h3><ul><li>mybatis<ul><li>sql注入：${Parameter}会存在，可以重点排查</li></ul></li><li>hibernate<ul><li>未采取预编译的地方，可以重点排查。例如：Query query &#x3D; session.createNativeQuery(“select * from user where name  &#x3D; <strong>‘“+parameter+”‘“</strong>);</li></ul></li><li></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计（一）</title>
    <link href="/2023/10/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2023/10/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><h2 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h2><p>1、接口排查：</p><p>​springboot是通过注释的方式配置程序的接口，可以正向接口排查</p><p>优点：</p><p>​排查相对全面</p><p>缺点：</p><p>​目的不强，不容易找到漏洞</p><p>2、危险函数定位法：</p><p>​如：runtime.exe()、java.lang.ProcessBuilder.star()</p><p>传入危险函数中的参数，是否由我们控制，对参数过滤是否严格、细致。</p><p>优点：有针对性的寻找漏洞</p><p>缺点：不够细致</p><p>建议：将接口排查和危险函数定位结合使用。重点关注传参，如果传参可以进入危险函数中，则细致跟踪传参。</p><p>黑盒测试：更多的是直觉。</p><p>跟踪后端的内容：例如sql注入等等等。可以在自己平常测试的地方进行后端代码审计。</p><p>3、组件对比：</p><p>maven管理的项目中pom.xml可以读取到当前网站用到的组件和类库。可以直接判断是否有存在漏洞的组件和类库。</p><p>gradle管理的项目中也有对应的文件。</p><p>例如使用shiro 1.3.2 可能存在shiro721反序列化漏洞。</p><ul><li>ysoserial-all.jar反序列化利用链：集成的反序列化链，在使用上面有一定限制，项目中需要存在commons-beanutils:1.9.2,commons-collections:3.1,commons-logging:1.2</li></ul><p>4、分析漏洞补丁</p><p>通过分析漏洞补丁，确定漏洞语法，可以找到代码中之前存在的问题。</p><p>针对某个漏洞去进行修复，找到原本并不知道的漏洞：1day,或者nday</p><p>5、功能点定向审计（接口排查）基于经验完成。</p><p>​通常是会在源码能运行的情况下去进行的</p><p>​逻辑问题：登录功能，登录绕过、没有鉴权的接口。</p><p>​交易系统的逻辑审计</p><p>​文件上传功能</p><p>​    评论功能，搜索功能等。</p><p>6、自动化代码扫描：</p><p>​通过自动化工具来完成。需要排除误报。</p><p>​    误报率非常高。</p><p>对提升代码审计的能力是没有帮助的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代审之IDEA远程调试</title>
    <link href="/2023/09/28/%E4%BB%A3%E5%AE%A1%E4%B9%8BIDEA%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    <url>/2023/09/28/%E4%BB%A3%E5%AE%A1%E4%B9%8BIDEA%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="代审之IDEA远程调试"><a href="#代审之IDEA远程调试" class="headerlink" title="代审之IDEA远程调试"></a>代审之IDEA远程调试</h1><p>前提：IntelliJ IDEA 可以在无源代码的情况下进行远程调试，只需将程序的 class 文件 或 Jar 包添加进项目依赖即可对一些未开源的 Java 程序或大型中间件进行远程调试。</p><h2 id="jar远程调试"><a href="#jar远程调试" class="headerlink" title="jar远程调试"></a>jar远程调试</h2><img src="C:\Users\13426\AppData\Roaming\Typora\typora-user-images\image-20231011063705861.png" alt="image-20231011063705861" style="zoom:50%;" /><p>jar包右键，选择**”Add as Library…”**</p><img src="C:\Users\13426\AppData\Roaming\Typora\typora-user-images\image-20231011064158905.png" alt="image-20231011064158905" style="zoom:45%;" /><p>点击**+<strong>选择添加一个</strong>remote**,记住启动参数</p><img src="C:\Users\13426\AppData\Roaming\Typora\typora-user-images\image-20231011065230651.png" alt="image-20231011065230651" style="zoom:50%;" /><p>运行jar可以在cmd命令行直接运行：</p><p>​输入命令：java -jar -agentlib:jdwp&#x3D;transport&#x3D;dt_socket,server&#x3D;y,suspend&#x3D;y,address&#x3D;5005 Behinder.jar</p><p>​显示：Listening for transport dt_socket at address: 5005即成功运行jar包。</p><p>当远程调用失败时，可以参考这篇文章。</p><p><a href="https://blog.csdn.net/qq_35246620/article/details/78507324">https://blog.csdn.net/qq_35246620/article/details/78507324</a></p><h2 id="tomcat远程调试"><a href="#tomcat远程调试" class="headerlink" title="tomcat远程调试"></a>tomcat远程调试</h2><h2 id="weblogic远程调试"><a href="#weblogic远程调试" class="headerlink" title="weblogic远程调试"></a>weblogic远程调试</h2>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计 远程调试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代审环境之Vulhub</title>
    <link href="/2023/09/28/%E4%BB%A3%E5%AE%A1%E7%8E%AF%E5%A2%83%E4%B9%8BVulhub/"/>
    <url>/2023/09/28/%E4%BB%A3%E5%AE%A1%E7%8E%AF%E5%A2%83%E4%B9%8BVulhub/</url>
    
    <content type="html"><![CDATA[<h1 id="代审环境之Vulhub"><a href="#代审环境之Vulhub" class="headerlink" title="代审环境之Vulhub"></a>代审环境之Vulhub</h1><h2 id="使用vulhub快速搭建漏洞验证环境"><a href="#使用vulhub快速搭建漏洞验证环境" class="headerlink" title="使用vulhub快速搭建漏洞验证环境"></a>使用vulhub快速搭建漏洞验证环境</h2><p>github地址：<a href="https://github.com/vulhub/vulhub">vulhub&#x2F;vulhub: Pre-Built Vulnerable Environments Based on Docker-Compose (github.com)</a></p><p>下载解压之后即可。</p><h3 id="启动漏洞环境"><a href="#启动漏洞环境" class="headerlink" title="启动漏洞环境"></a>启动漏洞环境</h3><pre><code class="hljs">#### 进入相应的文件夹</code></pre><ol><li>cmd输入命令:</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span><br></code></pre></td></tr></table></figure><ol start="2"><li>成功运行容器后，既可通过浏览器来访问漏洞环境。</li></ol><p>Vulhub是一个集成式的漏洞验证环境，通过yml文件的配置，从云端拉取漏洞环境镜像。</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代审 环境 vulhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker学习笔记（一）</title>
    <link href="/2023/09/24/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2023/09/24/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="docker学习笔记"><a href="#docker学习笔记" class="headerlink" title="docker学习笔记"></a>docker学习笔记</h1><p>我下载的是docker  desktop安装过程不表，可以说明的是，安装的过程比较复杂，会报一些异常，需要耐心百度处理。</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="修改虚拟机大小"><a href="#修改虚拟机大小" class="headerlink" title="修改虚拟机大小"></a>修改虚拟机大小</h3><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><p>打开setting-&gt;   Docker Engine-&gt;   Docker_mirror</p><hr><pre><code class="hljs">       <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>     <span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><br>   <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;insecure-registries&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;debug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;experimental&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></code></pre><hr><span id="more"></span><h2 id="初次使用"><a href="#初次使用" class="headerlink" title="初次使用"></a>初次使用</h2><p>​跑最基础的镜像，验证docker是否配置成功：docker run hello-world</p><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><ul><li>docker run 运行容器</li></ul><table><thead><tr><th align="left">常用可选参数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">-i</td><td align="left">表示以《交互模式》运行容器。</td></tr><tr><td align="left">-d</td><td align="left">会创建一个守护式容器在后台运行(这样创建容器后不会自动登录容器)。</td></tr><tr><td align="left">-t</td><td align="left">表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</td></tr><tr><td align="left">– name</td><td align="left">为创建的容器命名。(默认会随机给名字,不支持中文字符!!!)</td></tr><tr><td align="left">-v</td><td align="left">表示目录映射关系，即宿主机目录:容器中目录。注意:最好做目录映射，在宿主机上做修改，然后共享到容器上。</td></tr><tr><td align="left">-p</td><td align="left">表示端口映射，即宿主机端口:容器中端口。 比如:-p 8080:80 就是将容器中的80端口,映射到主机中的8080端口</td></tr><tr><td align="left">–network&#x3D;host</td><td align="left">表示将主机的网络环境映射到容器中，使容器的网络与主机相同。每个 Docker 容器都有自己的网络连接空间连接到虚拟 LAN。使用此命令则会让容器和主机共享一个网络空间。</td></tr></tbody></table><ul><li><p>docker search 查询镜像</p></li><li><p>docker ps 查看当前所有正在运行的容器</p></li><li><p>docker ps -a 查看当前所有的容器 </p></li><li><p>docker ps -f name&#x3D;指定的名字 使用过滤器(除了name外,常用的还可以指定id:id&#x3D; 、所有停止的容器:status&#x3D;exited,正在运行的容器:status&#x3D;running 等) </p></li><li><p>docker ps -n 2显示2个上次创建的容器(2可以改变)  </p></li><li><p>docker ps -l 显示最新创建的容器（包括所有状态） </p></li><li><p>docker ps -q 仅显示ip </p></li><li><p>docker ps -s 显示容器大小  </p></li><li><p>docker rm #删除一个或多个容器</p></li><li><p>docker rmi #删除一个或多个镜像</p></li><li><p>docker stop 容器名或容器id(前三位即可) #停止容器</p></li><li><p>docker container kill 容器名或容器id(前三位即可) #强制关闭容器</p></li><li><p>docker start 容器名或容器id(前三位即可) #启动容器</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2></li></ul><p>搭建一个xss平台<br>    docker search xss  查询镜像<br>    docker pull wushangleon&#x2F;xss-platform<br>    docker run -d –name&#x3D;xss_platform -p 8001:80 wushangleon&#x2F;xss_platform </p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ul><li><p>Exited（139）解决方案 :</p><p>  创建：C:\Users(用户名).wslconfig</p><p>  写入：</p></li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tex">[wsl2] <br><br>​   kernelCommandLine = vsyscall=emulate <br></code></pre></td></tr></table></figure><p>​</p><p>​      </p>]]></content>
    
    
    <categories>
      
      <category>工具篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/09/14/hello-world/"/>
    <url>/2023/09/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
